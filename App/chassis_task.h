/**
  ****************************(C) COPYRIGHT 2016 DJI****************************
  * @file       chassis.c/h
  * @brief      完成底盘控制任务。
  * @note       
  * @history
  *  Version    Date            Author          Modification
  *  V1.0.0     Dec-26-2018     RM              1. 完成
  *
  @verbatim
  ==============================================================================

  ==============================================================================
  @endverbatim
  ****************************(C) COPYRIGHT 2016 DJI****************************
  */
#ifndef CHASSISTASK_H
#define CHASSISTASK_H
#include "main.h"
#include "MotorCAN.h"
#include "Gimbal_Task.h"
#include "pid.h"
#include "RemotDbus.h"
#include "user_lib.h"

#define RC_SBUS_CHANNAL_MAX_VALUE   700.0f

//任务开始空闲一段时间
#define CHASSIS_TASK_INIT_TIME 357
#define MOUSE_TO_WZ 0.02f
//前后的遥控器通道号码
#define CHASSIS_X_CHANNEL 1
//左右的遥控器通道号码
#define CHASSIS_Y_CHANNEL 0
//在特殊模式下，可以通过遥控器控制旋转
#define CHASSIS_WZ_CHANNEL 2



//选择底盘状态 开关通道号
#define MODE_CHANNEL 0
//遥控器前进摇杆（max 660）转化成车体前进速度（m/s）的比例
#define CHASSIS_VX_RC_SEN 0.0053f
//遥控器左右摇杆（max 660）转化成车体左右速度（m/s）的比例
#define CHASSIS_VY_RC_SEN 0.0035f
//跟随底盘yaw模式下，遥控器的yaw遥杆（max 660）增加到车体角度的比例
#define CHASSIS_ANGLE_Z_RC_SEN 0.000002f
//不跟随云台的时候 遥控器的yaw遥杆（max 660）转化成车体旋转速度的比例
#define CHASSIS_WZ_RC_SEN 0.006f

#define CHASSIS_ACCEL_X_NUM 0.1666666667f
#define CHASSIS_ACCEL_Y_NUM 0.3333333333f

#define CHASSIS_RC_DEADLINE 10

#define MOTOR_SPEED_TO_CHASSIS_SPEED_VX 0.25f
#define MOTOR_SPEED_TO_CHASSIS_SPEED_VY 0.25f
#define MOTOR_SPEED_TO_CHASSIS_SPEED_WZ 0.25f

#define MOTOR_DISTANCE_TO_CENTER 0.2f

//底盘任务控制间隔 2ms
#define CHASSIS_CONTROL_TIME_MS 2
//底盘任务控制间隔 0.002s
#define CHASSIS_CONTROL_TIME 0.002
//底盘任务控制频率，尚未使用这个宏
#define CHASSIS_CONTROL_FREQUENCE 500.0f
//底盘3508最大can发送电流值
#define MAX_MOTOR_CAN_CURRENT 16000.0f

//底盘360旋转按键
#define REVOLVE_START_KEY   KEY_PRESSED_OFFSET_SHIFT
#define REVOLVE_STOP_KEY    KEY_PRESSED_OFFSET_CTRL
//底盘摇摆按键
//#define SWING_START_KEY KEY_PRESSED_OFFSET_SHIFT
//#define SWING_STOP_KEY KEY_PRESSED_OFFSET_CTRL
//底盘前后左右控制按键
#define CHASSIS_FRONT_KEY KEY_PRESSED_OFFSET_W
#define CHASSIS_BACK_KEY  KEY_PRESSED_OFFSET_S
#define CHASSIS_LEFT_KEY  KEY_PRESSED_OFFSET_A
#define CHASSIS_RIGHT_KEY KEY_PRESSED_OFFSET_D

//m3508转化成底盘速度(m/s)的比例，做两个宏 是因为可能换电机需要更换比例
#define M3508_MOTOR_RPM_TO_VECTOR 0.000415809748903494517209f
#define CHASSIS_MOTOR_RPM_TO_VECTOR_SEN    M3508_MOTOR_RPM_TO_VECTOR










//底盘运动过程最大前进速度
#define SLOW_MAX_CHASSIS_SPEED_X 0.5f
#define SLOW_MIN_CHASSIS_SPEED_X 0.5f
#define CHASSIS_X_ADD_VALUE   0.001f;

//底盘电机最大速度
#define MAX_WHEEL_SPEED 12.0f
//底盘电机左右最大速度
#define MAX_WHEEL_right_left_SPEED 8.0f

//底盘运动过程最大前进速度
#define NORMAL_MAX_CHASSIS_SPEED_X 1.5f
#define NORMAL_MIN_CHASSIS_SPEED_X 1.5f

#define CHASSIS_ADD_MIN_VALUE 0.008f

//底盘运动过程最大平移速度
#define NORMAL_MAX_CHASSIS_SPEED_Y 2.4f


//底盘运动过程最大平移速度
#define SLOW_MAX_CHASSIS_SPEED_Y 1.0f
#define CHASSIS_Y_ADD_VALUE   0.001f;

//底盘设置旋转速度，设置前后左右轮不同设定速度的比例分权 0为在几何中心，不需要补偿
#define CHASSIS_WZ_SET_SCALE 0.1f
//底盘旋转前进最大速度
#define REVOLVE_MAX_CHASSIS_SPEED_X1 428
#define REVOLVE_MAX_CHASSIS_SPEED_X  1.0f

//底盘旋转平移的最大速度
#define REVOLVE_MAX_CHASSIS_SPEED_Y1 200
#define REVOLVE_MAX_CHASSIS_SPEED_Y  0.8f









//				if(given_init_x == 0) vx_set_channel = 0.4f;
//			     vx_set_channel += CHASSIS_X_ADD_VALUE;
//			  if( vx_set_channel == REVOLVE_MAX_CHASSIS_SPEED_X)
//					
//摇摆原地不动摇摆最大角度(rad)
#define SWING_NO_MOVE_ANGLE 0.7f
//摇摆过程底盘运动最大角度(rad)
#define SWING_MOVE_ANGLE 0.31415926535897932384626433832795f

 //底盘电机角度环PID
#define M3505_MOTOR_RELATIVE_PID_KP 3.0f
#define M3505_MOTOR_RELATIVE_PID_KI 0.0f
#define M3505_MOTOR_RELATIVE_PID_KD 0.0f
#define M3505_MOTOR_RELATIVE_PID_MAX_OUT  20.0f
#define M3505_MOTOR_RELATIVE_PID_MAX_IOUT  0.0f

//底盘电机速度环PID
#define M3505_MOTOR_SPEED_PID_KP 2500.0f//5000.0f//4000.0f//4000.0f//6500.0f//4000.0f
#define M3505_MOTOR_SPEED_PID_KI 0.0f
#define M3505_MOTOR_SPEED_PID_KD 0.0f
#define M3505_MOTOR_SPEED_PID_MAX_OUT    3000.0f//10000.0f//10000.0f  //16000.0f
#define M3505_MOTOR_SPEED_PID_MAX_IOUT  0.0f// 1000.0f// 1000.0f//10000.0f

/********双环*********
位置环kp 9.0f
//底盘电机速度环PID
#define M3505_MOTOR_SPEED_PID_KP 1500.0f
#define M3505_MOTOR_SPEED_PID_KI 50f
#define M3505_MOTOR_SPEED_PID_KD 0.0f
#define M3505_MOTOR_SPEED_PID_MAX_OUT 16000.0f
#define M3505_MOTOR_SPEED_PID_MAX_IOUT 4000.0f
************************/
//底盘旋转跟随PID
#define CHASSIS_FOLLOW_GIMBAL_PID_KP 18.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_KI 0.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_KD 0.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_MAX_OUT 6.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_MAX_IOUT 0.2f

//小陀螺旋转PID，第二种方法时用
#define CHASSIS_REVOLCE_PID_KP 40.0f
#define CHASSIS_REVOLCE_PID_KI 0.0f
#define CHASSIS_REVOLCE_PID_KD 0.0f
#define CHASSIS_REVOLCE_PID_MAX_OUT 6.0f
#define CHASSIS_REVOLCE_PID_MAX_IOUT 0.2f

#define Chassis_Motor_Ecd_to_Rad 0.000766990394f //      2*  PI  /8192
#define DOUBLE_LOOP_CONTROL      0

typedef enum
{
  CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW,
  CHASSIS_VECTOR_FOLLOW_CHASSIS_YAW,
  CHASSIS_VECTOR_NO_FOLLOW_YAW,
  CHASSIS_VECTOR_RAW,

  //  CHASSIS_AUTO,
  //  CHASSIS_FOLLOW_YAW,
  //  CHASSIS_ENCODER,
  //  CHASSIS_NO_ACTION,
  //  CHASSIS_RELAX,
} chassis_mode_e;

typedef struct
{
  const motor_measure_t *chassis_motor_measure;
  fp32 accel;
	fp32 chassis_motor_relative_speed_set;
	fp32 chassis_cale_angle;
  fp32 speed;
	fp32 chassis_motor_relative_angle;
	fp32 chassis_motor_relative_angle_set;
  int16_t give_current;
} Chassis_Motor_t;

 typedef struct
{
    fp32 kp;
    fp32 ki;
    fp32 kd;

    fp32 set;
    fp32 get;
    fp32 err;

    fp32 max_out;
    fp32 max_iout;

    fp32 Pout;
    fp32 Iout;
    fp32 Dout;

    fp32 out;
} Chassis_PID_t;



typedef struct
{
  const RC_ctrl_t *chassis_RC;               //底盘使用的遥控器指针
  const Gimbal_Motor_t *chassis_yaw_motor;   //底盘使用到yaw云台电机的相对角度来计算底盘的欧拉角
  const Gimbal_Motor_t *chassis_pitch_motor; //底盘使用到pitch云台电机的相对角度来计算底盘的欧拉角
  const fp32 *chassis_INS_angle;             //获取陀螺仪解算出的欧拉角指针
  chassis_mode_e chassis_mode;               //底盘控制状态机
  chassis_mode_e last_chassis_mode;          //底盘上次控制状态机
  Chassis_Motor_t motor_chassis[4];          //底盘电机数据
  Chassis_PID_t motor_relative_angle_pid[4];    	
  PidTypeDef motor_speed_pid[4];             //底盘电机速度pid
  PidTypeDef chassis_angle_pid;              //底盘跟随角度pid
	PidTypeDef revolve_pid;                    //小陀螺旋转pid

  first_order_filter_type_t chassis_cmd_slow_set_vx;
  first_order_filter_type_t chassis_cmd_slow_set_vy;

  fp32 vx;                         //底盘速度 前进方向 前为正，单位 m/s
  fp32 vy;                         //底盘速度 左右方向 左为正  单位 m/s
  fp32 wz;                         //底盘旋转角速度，逆时针为正 单位 rad/s
  fp32 vx_set;                     //底盘设定速度 前进方向 前为正，单位 m/s
  fp32 vy_set;                     //底盘设定速度 左右方向 左为正，单位 m/s
  fp32 wz_set;                     //底盘设定旋转角速度，逆时针为正 单位 rad/s
  fp32 chassis_relative_angle;     //底盘与云台的相对角度，单位 rad/s
  fp32 chassis_relative_angle_set; //设置相对云台控制角度
  fp32 chassis_yaw_set;
	fp32 chassis_yaw_motorerror;

  fp32 vx_max_speed2;  //前进方向最大速度 单位m/s
  fp32 vx_min_speed2;  //前进方向最小速度 单位m/s
  fp32 vy_max_speed2;  //左右方向最大速度 单位m/s
  fp32 vy_min_speed2;  //左右方向最小速度 单位m/s

  fp32 vx_max_speed;  //前进方向最大速度 单位m/s
  fp32 vx_min_speed;  //前进方向最小速度 单位m/s
  fp32 vy_max_speed;  //左右方向最大速度 单位m/s
  fp32 vy_min_speed;  //左右方向最小速度 单位m/s
  fp32 chassis_yaw;   //陀螺仪和云台电机叠加的yaw角度
  fp32 chassis_pitch; //陀螺仪和云台电机叠加的pitch角度
  fp32 chassis_roll;  //陀螺仪和云台电机叠加的roll角度	
	fp32 chassis_angle_set;//小陀螺第二种方法时计算出的角度
	fp32 revolve_angle;//用于计算小陀螺旋转时前进时二维矩阵三角函数
  
	
  fp32 real_power;
} chassis_move_t;


 /*********新添加文件**********/
void chassis_total_pid_clear(chassis_move_t *chassis_clear);
static void Chassis_PID_Init(Chassis_PID_t *pid, fp32 maxout, fp32 max_iout, fp32 kp, fp32 ki, fp32 kd);
static fp32 Chassis_PID_Calc(Chassis_PID_t *pid, fp32 get, fp32 set, fp32 error_delta);
static fp32 chassis_ecd_to_angle_change(uint16_t ecd, uint16_t offset_ecd);


extern void chassis_task(void *pvParameters);
extern void chassis_rc_to_control_vector(fp32 *vx_set, fp32 *vy_set, chassis_move_t *chassis_move_rc_to_vector);
extern float  GetChassisMaxOutput(void);
extern Chassis_Motor_t *getChassisGive_current(void );
#endif
